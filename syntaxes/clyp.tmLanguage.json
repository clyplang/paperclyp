{
  "name": "Clyp",
  "scopeName": "source.clyp",
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#numbers" },
    { "include": "#keywords" },
    { "include": "#types" },
    { "include": "#class" },
    { "include": "#function" },
    { "include": "#method" },
    { "include": "#operators" },
    { "include": "#brackets" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.clyp",
          "match": "#.*$"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.triple.single.clyp",
          "begin": "('{3})",
          "beginCaptures": { "1": { "name": "punctuation.definition.string.begin.clyp" } },
          "end": "('{3})",
          "endCaptures": { "1": { "name": "punctuation.definition.string.end.clyp" } },
          "name": "string.quoted.triple.clyp",
          "patterns": [{ "match": "\\\\.", "name": "constant.character.escape.clyp" }]
        },
        {
          "name": "string.quoted.triple.double.clyp",
          "begin": "(\"){\"3\"}|(\"\"\")",
          "beginCaptures": { "1": { "name": "punctuation.definition.string.begin.clyp" } },
          "end": "(\"){\"3\"}|(\"\"\")",
          "endCaptures": { "1": { "name": "punctuation.definition.string.end.clyp" } },
          "patterns": [{ "match": "\\\\.", "name": "constant.character.escape.clyp" }]
        },
        {
          "name": "string.quoted.double.clyp",
          "begin": "\"",
          "end": "\"",
          "beginCaptures": { "0": { "name": "punctuation.definition.string.begin.clyp" } },
          "endCaptures": { "0": { "name": "punctuation.definition.string.end.clyp" } },
          "patterns": [{ "match": "\\\\.", "name": "constant.character.escape.clyp" }]
        },
        {
          "name": "string.quoted.single.clyp",
          "begin": "'",
          "end": "'",
          "beginCaptures": { "0": { "name": "punctuation.definition.string.begin.clyp" } },
          "endCaptures": { "0": { "name": "punctuation.definition.string.end.clyp" } },
          "patterns": [{ "match": "\\\\.", "name": "constant.character.escape.clyp" }]
        }
      ]
    },
    "numbers": {
      "patterns": [
        { "name": "constant.numeric.float.clyp", "match": "\\b\\d+\\.\\d+([eE][+-]?\\d+)?\\b" },
        { "name": "constant.numeric.decimal.clyp", "match": "\\b\\d+([eE][+-]?\\d+)?\\b" },
        { "name": "constant.numeric.hex.clyp", "match": "\\b0x[0-9A-Fa-f]+\\b" }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.clyp",
          "match": "\\b(class|function|if|else|elif|unless|for|while|repeat|return|break|continue|import|from|include|let|try|except|raise|pass|pyimport)\\b"
        },
        {
          "name": "constant.language.clyp",
          "match": "\\b(true|false|null)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.clyp",
          "match": "\\b(int|float|str|bool|list|map|void|any)\\b"
        },
        {
          "name": "entity.name.type.annotation.clyp",
          "match": "\\b[A-Z][A-Za-z0-9_]*\\b"
        }
      ]
    },
    "class": {
      "patterns": [
        {
          "name": "meta.class.clyp",
          "begin": "\\b(class)\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*\\{",
          "beginCaptures": {
            "1": { "name": "keyword.declaration.class.clyp" },
            "2": { "name": "entity.name.type.class.clyp" },
            "0": { "name": "punctuation.section.block.begin.clyp" }
          },
          "end": "\\}",
          "endCaptures": { "0": { "name": "punctuation.section.block.end.clyp" } },
          "patterns": [
            { "include": "#comments" },
            { "include": "#strings" },
            { "include": "#function" },
            { "include": "#method" }
          ]
        }
      ]
    },
    "function": {
      "patterns": [
        {
          "name": "meta.function.clyp",
          "begin": "\\b(function)\\s+([A-Za-z_][A-Za-z0-9_]*)\\s*\\(",
          "beginCaptures": {
            "1": { "name": "keyword.declaration.function.clyp" },
            "2": { "name": "entity.name.function.clyp" }
          },
          "end": "\\}",
          "endCaptures": { "0": { "name": "punctuation.section.block.end.clyp" } },
          "patterns": [
            { "include": "#strings" },
            { "include": "#comments" }
          ]
        }
      ]
    },
    "method": {
      "patterns": [
        {
          "name": "meta.method.clyp",
          "match": "^\\s*([A-Za-z_][A-Za-z0-9_]*)\\s*\\([^\\)]*\\)\\s*(returns\\s+[A-Za-z_][A-Za-z0-9_]*\\s*)?:",
          "captures": {
            "1": { "name": "entity.name.function.clyp" },
            "0": { "name": "punctuation.separator.method.clyp" }
          }
        }
      ]
    },
    "operators": {
      "patterns": [
        { "name": "keyword.operator.clyp", "match": "\\+|\\-|\\*|\\/|%|==|!=|<=|>=|<|>|<<|>>|&|\\||\\^|\\bin\\b|\\bis\\b|\\bis not\\b|\\bnot\\b|\\band\\b|\\bor\\b" },
        { "name": "keyword.operator.assignment.clyp", "match": "=" }
      ]
    },
    "brackets": {
      "patterns": [
        { "name": "punctuation.section.block.begin.clyp", "match": "\\{" },
        { "name": "punctuation.section.block.end.clyp", "match": "\\}" },
        { "name": "punctuation.separator.semicolon.clyp", "match": ";" },
        { "name": "punctuation.separator.comma.clyp", "match": "," }
      ]
    }
  },
  "scopeName": "source.clyp"
}
